{"ast":null,"code":"var _jsxFileName = \"/home/yaote/final/final/src/components/participants/Bidder.js\";\nimport { Component } from \"react\";\nimport * as Backend from \"../../build/index.main.mjs\";\nimport { Context } from \"../../Context\";\nimport BidderViews from \"./BidderViews\";\nimport { loadStdlib } from '@reach-sh/stdlib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reach = loadStdlib('ALGO');\nexport class Bidder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      appState: \"\",\n      args: [],\n      resGetBid: null,\n      resIsAuctionOn: null\n    };\n    this.getBidExt = this.getBidExt.bind(this);\n    this.isAuctionOnExt = this.isAuctionOnExt.bind(this);\n  }\n\n  componentDidMount() {\n    const [,,,,,, ctc,,,,] = this.context;\n    this.interval = setInterval(async () => this.updateBalance(), 5000);\n    Backend.Bidder(ctc[0], this);\n  }\n\n  async updateBalance() {\n    const [account,,, setBalance] = this.context;\n    const balance = Reach.formatCurrency(await Reach.balanceOf(account), 4);\n    setBalance(balance);\n  }\n\n  async informTimeout() {\n    this.setState({\n      appState: \"informTimeout\"\n    });\n  }\n\n  async showBid(getId, nftViewAddress, bid, address) {\n    const addressFormat = Reach.formatAddress(address);\n    const bidFormat = Reach.formatCurrency(bid, 4);\n    this.setState({\n      appState: \"showBid\",\n      args: [getId, nftViewAddress, bidFormat, addressFormat]\n    });\n  }\n\n  async seeOutcome(getId, nftViewAddress, address) {\n    const addressFormat = Reach.formatAddress(address);\n    this.setState({\n      appState: \"seeOutcome\",\n      args: [getId, nftViewAddress, addressFormat]\n    });\n  }\n\n  async getBid(getId, nftViewAddress) {\n    const bid = await new Promise(res => {\n      this.setState({\n        appState: \"getBid\",\n        args: [getId, nftViewAddress],\n        resGetBid: res\n      });\n    });\n    return bid;\n  }\n\n  getBidExt(bid) {\n    this.state.resGetBid(bid);\n  }\n\n  async isAuctionOn(getId, nftViewAddress) {\n    const response = await new Promise(res => {\n      this.setState({\n        appState: \"isAuctionOn\",\n        args: [getId, nftViewAddress],\n        resIsAuctionOn: res\n      });\n    });\n    return response;\n  }\n\n  isAuctionOnExt(res) {\n    this.state.resIsAuctionOn(res);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BidderViews, {\n      appState: this.state.appState,\n      args: this.state.args,\n      getBidReady: this.state.resGetBid !== null,\n      getBid: this.getBidExt,\n      isAuctionOnReady: this.state.resIsAuctionOn !== null,\n      isAuctionOn: this.isAuctionOnExt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this);\n  }\n\n}\nBidder.contextType = Context;","map":{"version":3,"sources":["/home/yaote/final/final/src/components/participants/Bidder.js"],"names":["Component","Backend","Context","BidderViews","loadStdlib","Reach","Bidder","constructor","props","state","appState","args","resGetBid","resIsAuctionOn","getBidExt","bind","isAuctionOnExt","componentDidMount","ctc","context","interval","setInterval","updateBalance","account","setBalance","balance","formatCurrency","balanceOf","informTimeout","setState","showBid","getId","nftViewAddress","bid","address","addressFormat","formatAddress","bidFormat","seeOutcome","getBid","Promise","res","isAuctionOn","response","render","contextType"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport * as Backend from \"../../build/index.main.mjs\";\nimport { Context } from \"../../Context\";\nimport BidderViews from \"./BidderViews\";\nimport {loadStdlib} from '@reach-sh/stdlib';\nconst Reach = loadStdlib('ALGO');\n\nexport class Bidder extends Component {\n    static contextType = Context;\n    constructor(props) {\n        super(props);\n        this.state = {\n            appState: \"\",\n            args: [],\n            resGetBid: null,\n            resIsAuctionOn: null,            \n        };\n        this.getBidExt = this.getBidExt.bind(this);\n        this.isAuctionOnExt = this.isAuctionOnExt.bind(this);\n    }\n\n    componentDidMount() {\n        const [, , , , , , ctc, , , ,] = this.context;\n        this.interval = setInterval(async () => this.updateBalance(), 5000);\n        Backend.Bidder(ctc[0], this);\n    }\n\n    async updateBalance() {        \n        const [account, , , setBalance] = this.context;\n        const balance = Reach.formatCurrency(await Reach.balanceOf(account), 4);\n        setBalance(balance);\n    }\n\n    async informTimeout() {\n         this.setState({\n            appState: \"informTimeout\",\n        });\n    }\n\n    async showBid(getId, nftViewAddress, bid, address) {\n         const addressFormat = Reach.formatAddress(address);\n         const bidFormat = Reach.formatCurrency(bid, 4);         \n         this.setState({\n             appState: \"showBid\",\n             args: [getId ,nftViewAddress, bidFormat ,addressFormat],\n         })\n     }\n\n     async seeOutcome(getId, nftViewAddress, address) {\n        const addressFormat = Reach.formatAddress(address);\n        this.setState({\n            appState: \"seeOutcome\",\n            args: [getId, nftViewAddress, addressFormat],\n            \n        })\n    }\n\n    async getBid(getId ,nftViewAddress) {\n        const bid = await new Promise(res => {\n            this.setState({\n                appState: \"getBid\",\n                args: [getId, nftViewAddress],\n                resGetBid: res,\n            });\n        });\n        return bid;\n    }\n    getBidExt(bid) {\n        this.state.resGetBid(bid);\n    }\n\n    async isAuctionOn(getId, nftViewAddress) {\n        const response = await new Promise (res => {\n            this.setState({\n                appState: \"isAuctionOn\",\n                args: [getId,nftViewAddress],\n                resIsAuctionOn: res,\n            })\n        });\n        return response;\n    }\n\n    isAuctionOnExt(res) {\n        this.state.resIsAuctionOn(res);\n    }\n\n    render() {\n        return (<BidderViews\n            appState={this.state.appState}\n            args={this.state.args}\n            getBidReady={this.state.resGetBid !== null}\n            getBid={this.getBidExt} \n            isAuctionOnReady={this.state.resIsAuctionOn !== null}\n            isAuctionOn={this.isAuctionOnExt} />\n        );            \n    }\n}\n"]},"metadata":{},"sourceType":"module"}